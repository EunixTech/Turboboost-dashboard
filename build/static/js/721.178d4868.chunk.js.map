{"version":3,"file":"static/js/721.178d4868.chunk.js","mappings":"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","sources":["components/SideBanner.jsx","components/button/GoogleLogin.jsx","views/SignInPage.jsx"],"sourcesContent":["import React from 'react'\n\nexport default function SideBanner() {\n\n    return (\n        <div className=\"w-[50%] h-[100vh] relative\">\n\n            <img\n                src=\"/graphic/login/bg.png\"\n                className=\"w-[100%] h-[100vh] object-cover absolute z-0\"\n                alt=\"svgIcon\"\n            />\n\n            <div className=\"w-[100%] h-[100vh] flex items-center justify-center absolute z-10\">\n                <img\n                    src=\"/graphic/login/ellipse.png\"\n                    className=\"w-[100%] h-[100vh] object-cover\"\n                    alt=\"svgIcon\"\n                />\n            </div>\n\n            <div className=\"w-[100%] h-[100vh]  flex items-end justify-end opacity-20 absolute z-20\">\n                <img\n                    src=\"/graphic/login/Vector.png\"\n                    className=\"w-[95%]\"\n                    alt=\"banner image\"\n                />\n            </div>\n\n            <div className=\"overflow-hidden w-[100%] h-[100vh] flex items-center flex-col justify-center absolute z-30\">\n                <h1 className=\"inter text-white text-[30px] text-center px-[100px] leading-[38px] font-medium\">\n                    Increasing your website speed has dwnever been easier.\n                </h1>\n\n                <div className=\"w-[600px] mt-[10px] flex items-center justify-center\">\n                    {[\n                        \"7-day free trial\",\n                        \"One-click setup\",\n                        \"No fixed contracts\",\n                    ].map((item, index) => (\n                        <div\n                            key={index}\n                            className=\"mr-[17px] h-[30px] flex items-center\"\n                        >\n                            <img\n                                src=\"/graphic/login/tick.png\"\n                                className=\"w-[10px]  h-[10px] object-contain   mr-[8px]\"\n                                alt=\"svgIcon\"\n                            />\n                            <p className=\"text-[13px] inter font-medium text-white\">\n                                {item}\n                            </p>\n                        </div>\n                    ))}\n                </div>\n\n                <div className=\"relative laptop:w-[370px] scale-110 desktop:w-[65%] mt-[40px] h-[300px]\">\n                    <img src=\"/graphic/login/g1.png\" alt=\"svgIcon\" />\n                    <img\n                        src=\"/graphic/login/g2.png\"\n                        className=\"w-[350px] translate-x-[-70px] translate-y-[120px] absolute bottom-0 left-0\"\n                        alt=\"svgIcon\"\n                    />\n                    <img\n                        src=\"/graphic/login/g3.png\"\n                        className=\"w-[250px]  absolute top-[100px] right-0 translate-x-[50px] \"\n                        alt=\"svgIcon\"\n                    />\n                </div>\n                \n            </div>\n\n        </div>\n\n    )\n\n}\n","import React from 'react';\nimport { GoogleLogin } from '@react-oauth/google';\nimport { useGoogleLogin } from '@react-oauth/google';\nimport { useDispatch } from 'react-redux';\nimport { loginWithGoogle } from '../../slice/userLoginWithGoogleSlice'\n\nexport default function GoogleLoginButton() {\n  const dispatch = useDispatch();\n\n  const renderButton = ({ onClick }) => {\n    return (\n      <button style={{ display: 'none' }} onClick={onClick}>\n        <svg width=\"25\" height=\"24\" viewBox=\"0 0 25 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          {/* Your SVG icon code here */}\n        </svg>\n        Sign in with Google\n      </button>\n    );\n  };\n\n  const loginWithGoogle = useGoogleLogin({\n    onSuccess: async (response) => {\n      // Prepare the data to be sent to your API\n      const data = {\n        name: response.given_name,\n        email_address: response.email,\n        google_id: String(response.sub.toLowerCase()),\n        google_token: response.access_token,\n        device_token: 'token',\n        device_type: 1,\n      };\n\n      // Dispatch the Redux action to make the API request\n      dispatch(loginWithGoogle(data));\n    },\n  });\n\n  return (\n    <>\n      <GoogleLogin onSuccess={(credentialResponse) => {}} render={renderButton} onError={() => {}} />\n    </>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport useWidth from \"../hooks/useWidth\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\"; // Import axios\n\nimport GoogleLoginButton from \"../components/button/GoogleLogin\";\nimport FormikInput from \"../components/forms/FormikInput\";\nimport SideBanner from \"../components/SideBanner\";\n\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nconst validationSchema = Yup.object().shape({\n  email_address: Yup.string()\n    .email(\"Invalid email address\")\n    .required(\"Email is required\"),\n  password: Yup.string()\n    .required(\"Password is required\"),\n});\n\nconst SignInPage = () => { \n  const router = useNavigate();\n  const screenWidth = useWidth();\n  const navigate = useNavigate();\n  const { userInfo } = useSelector((state) => state.auth);\n\n  const submitForm = async (values) => {\n    axios.post(\"http://localhost:8000/v1/user/login-with-email\", {\n      email_address: values.email_address,\n      password: values.password,\n    })\n    .then(response => {\n      console.log(\"API Response:\", response.status, response.data);\n      if (response.data?.status === 400) { \n        console.error(\"Sign-in failed. Please try again.\");\n      } else if (response.status === 200) {\n        router(\"/\");\n      } else {\n        console.error(\"Sign-in failed. Please try again.\");\n      }\n    })\n      .catch(error => {\n        console.error(\"API call error:\", error);\n        if (error.response && error.response.status === 400) {\n          console.error(\"Invalid email or password. Please try again.\");\n        } else {\n          console.error(\"Sign-in failed. Please try again.\");\n        }\n      });\n    \n  }\n  \n  \n  const token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NTczNjc2NThhZmU4N2QwODM2YzA4OGQiLCJpYXQiOjE3MDIzODc2NDgsImV4cCI6MTcwNDk3OTY0OH0.zSBQ512pcmmU2XXDeiYfvEY8gUrN1GwC0lniUHLLkhY\";\nlocalStorage.setItem('accessToken', token);\n\n  useEffect(() => {\n    if (userInfo) {\n      navigate(\"/\");\n    }\n  }, [navigate, userInfo]);\n\n  return (\n    <div className=\"w-[100%] h-[100vh] flex items-center justify-center\">\n      <div className=\"laptop:w-[50%] mobile:w-[100%] mobile:overflow-y-auto px-[100px] h-[100vh] px-[7%] flex items-center laptop:justify-center\">\n        <div className=\"w-[100%]\">\n          <Formik\n            initialValues={{\n              email_address: \"\",\n              password: \"\",\n            }}\n            validationSchema={validationSchema}\n            onSubmit={submitForm}\n          >\n\n            {() => (\n              <Form>\n                <img src=\"/logo-b.png\" className=\"w-[150px]\" alt=\"\" />\n                <h1 className=\"text-[34px] mt-[10px] font-bold\">Sign In</h1>\n                <p className=\"text-[#969AA5] inter text-[14px] mb-[10px]\">\n                  {\" \"}\n                  Please enter your credentials below.\n                </p>\n\n                <div className=\"w-[100%] mt-[20px] mb-[13px]\">\n                  <FormikInput\n                    inputLabel=\"Email\"\n                    inputName=\"email_address\"\n                    inputType=\"email\"\n                  />\n\n                  <FormikInput\n                    inputLabel=\"Password\"\n                    inputName=\"password\"\n                    inputType=\"password\"\n                  />\n\n                  <div className=\"w-[100%] flex justify-between\">\n                    <div className=\"flex\">\n                      <input\n                        type=\"checkbox\"\n                        className=\"mr-[5px]\"\n                        name=\"remember_me\"\n                        // onChange={onChangeHandler}\n                      />\n                      <p className=\"text-[13px] font-medium text-[#000] translate-y-[1px]\">\n                        Remember me\n                      </p>\n                    </div>\n                    <a href=\"/auth/forgot-password\">\n                      <p className=\"text-[13px] font-medium text-[#06F] text-[#06F] cursor-pointer translate-y-[1px]\">\n                        Forgot password\n                      </p>\n                    </a>\n                  </div>\n                  <button\n                    type=\"submit\"\n                    className=\"h-[38px] text-[#000] w-[100%] font-medium cursor-pointer font-medium flex items-center justify-center px-[20px] mt-[15px] inter text-[12px] bg-[#38F8AC] rounded-sm mb-[20px]\"\n                  >\n                    <span className=\"translate-y-[1.5px]\">Sign In</span>\n                  </button>\n                </div>\n              </Form>\n            )}\n          </Formik>\n\n          <GoogleLoginButton />\n          <p className=\"text-center text-[#b2b3b6] text-[13px] font-medium mt-[10px]\">\n            Don’t have an account?\n            <span\n              onClick={() => {\n                router(\"/auth/signUp\");\n              }}\n              className=\"text-[#06F] font-bold cursor-pointer\"\n            >\n              {\" \"}\n              Sign up{\" \"}\n            </span>\n          </p>\n        </div>\n      </div>\n\n      {screenWidth > 1000 && <SideBanner />}\n    </div>\n  );\n};\n\nexport default SignInPage;\n\n\n\n\n"],"names":["SideBanner","_jsxs","className","children","_jsx","src","alt","map","item","index","GoogleLoginButton","dispatch","useDispatch","loginWithGoogle","useGoogleLogin","onSuccess","async","data","name","response","given_name","email_address","email","google_id","String","sub","toLowerCase","google_token","access_token","device_token","device_type","_Fragment","GoogleLogin","credentialResponse","render","_ref","onClick","style","display","width","height","viewBox","fill","xmlns","onError","validationSchema","Yup","shape","required","password","SignInPage","router","useNavigate","screenWidth","useWidth","navigate","userInfo","useSelector","state","auth","localStorage","setItem","useEffect","Formik","initialValues","onSubmit","axios","post","values","then","_response$data","console","log","status","error","catch","Form","FormikInput","inputLabel","inputName","inputType","type","href"],"sourceRoot":""}